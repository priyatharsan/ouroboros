time
    clk
        at
        after
        every
        relate
        iso8601
math
    vec - vector transforms
        abs2rel - absolute to relative frame
        rel2abs - relative to absolute frame
        nrt2rot - inertial to rotating frame
        rot2nrt - rotating to inertial frame
        fun2obl - fundamental to oblique plane
        obl2fun - oblique to fundamental plane
        rec2sph - Rectangular to spherical coordinates
        sph2rec - spherical to rectangular coordinates
    rot - spatial rotation
        quat2rec - quaternion to angle-vector
        rec2quat - angle-vector to quaternion
        quat2rpy - quaternion to Euler angles
        rpy2quat - Euler angles to quaternion
        quat2mat - quaternion to rotation matrix
        mat2quat - rotation matrix to quaternion
    ode - ordinary differential equations
        euler - Euler method
        beuler - backward Euler method
        imid - implicit midpoint
        heun - Heun method
        trap - trapezoidal rule
        rk4 - Runge-Kutta method
        dp45 - Dormand-Prince method
        ab5 - Adams-Bashforth method
        am5 - Adams-Moulton method
        bdf6 - Backwards differentiation formula method
        verlet - Velocity Verlet integrator
    pde - partial differential equations
        fdm - finite different method
        fvm - finite volume method
        fem - finite element method
    sph_harm - spherical harmonics
phyx
    dyn - dynamics
    em - electrodynamics
        point - point charge
        e2pol - electric dipole
        m2pol - magnetic dipole
    gee - gravity
        point - point mass
astro
    geo - earth
        jd - Julian date
        st - sidereal time
        ax - axis of rotation
        rose - compass rose
        mag - International Geomagnetic Reference Field
        pot - Earth Gravitational Model
        atmo - International Standard Atmosphere
        sph2geo - geocentric to geodetic coordinate
        geo2sph - geodetic to geocentric coordinate
    orb - orbital dynamics
        unikep - universal variable formulation
        tle2sgp - two-line elements to simple general perturbation
        sgp4tle - simple general perturbation for two-line elements
        jpl_de - Jet Propulsion Lab Development Ephemeris
        ephem - Generic ephemeris
        inv2law - constants of motion
        rec2kep - vector to Kepler elements
        kep2rec - Kepler elements to vector
    ev - orbital events
        apsis - apsis crossing
        node - node crossing
        pole - pole crossing
    sat - satellite hardware
        ant - Antenna
        batt - Battery
        volt_rail - Voltage rail
        heat_pipe - Heat pipe
        rad - Radiator
        gyro - Gyroscope
        rw - Reaction wheel
        mag - Magnetometer
        mt - Magnetorquer
    eg - examples
        eci2ecef - inertial to earth-fixed coordinates
        - add geo.axis
        - add th_bar = gst * K_HAT to geo.axis
        - same as vec.nrt2rot
        ecef2eci - inertial to earth-fixed coordinates
        - same as vec.rot2nrt
        geo2helio - geo- to heliocentric coordinates
        - use orb.kep2rec
        - use orb.unikep
        - same as vec.rel2abs
        helio2geo - helio- to geocentric coordinates
        - same as vec.abs2rel
        equ2ecl - equatorial to ecliptic plane
        - add gst_t = 360.98564724 / (24 * 60 * 60) to geo.st
        - add obl = radians(dms2deg(23, 26, 21.45) -
                            (dms2deg(s=46.815) +
                             (dms2deg(s=0.0059) -
                              dms2deg(s=0.00181) * T0) * T0) * T0) to geo.axis
        - add om_bar = gst_t * (sin(obl) * I_HAT + 
                                cos(obl) * K_HAT) to geo.axis
        - same as vec.obl2fun
        ecl2equ - equatorial to ecliptic plane
        - same as vec.fun2obl
        geo2topo - geo- to topocentric coordinates
        - same as abs2rel
        topo2geo - topo- to geocentric coordinates
        - same as rel2abs
        equ2hori - equatorial to horizontal plane
        - add geo.rose
        - add north, south, east, west to geo.rose
        - add zenith, nadir to geo.rose
        - use geo.sph2geo
        - use vec.sph2rec
        - same as vec.fun2obl
        hori2equ - horizontal to equatorial plane
        - same as vec.obl2fun
robot
    dyn
    ele
        rigid6dof - Rigid body (6 DOF)
    pair
        fix0dof - Fixed pair (0 DOF)
        lin1dof - Prismatic pair (1 DOF)
        rot1dof - Revolute pair (1 DOF)
    act
        lin1dof - Linear actuator (1 DOF)
        rot1dof - Rotary actuator (1 DOF)

ECI to ECEF
('sc', None) -> rot2nrt -> ('sc', 'center')
('gs', 'center') -> sph2rec -> ('gs', 'center')

Geocentric to geodetic
('sc', 'center') -> sph2geo -> ('sc', 'datum')

Geodetic to geocentric
('gs', 'datum') -> geo2sph -> ('gs', 'center')

ECEF to ECI
('gs', 'center') -> sph2rec -> ('gs', 'center')
('gs', 'center') -> rot2nrt -> ('gs', None)

Inertial to topocentric equatorial
('gs', None), ('sc', None) -> abs2rel -> ('gs', 'sc')
('gs', 'sc') -> sph2rec -> ('gs', 'sc')

Inertial to topocentric horizontal
('gs', None), ('gs', 'sc') -> fun2obl -> ('???', 'sc')
('???', 'sc') -> sph2rec -> ('???', 'sc')

time: [n]ame [a]fter [b]efore [e]very
ctlr: [n]ame [p]roc [t]ime [d]ata*
obsr: [n]ame [p]roc [t]ime [d]ata*
data: [n]ame ([k]ey [t]ype [v]alue)*
    null: system
    true: truth
    false: external
    str: internal
fact: [n]ame [p]roc [d]ata* [r]ule*
plan: [n]ame [p]roc [d]ata* [r]ule*
rule: [n]ame [f]act* [p]lan*

ctlr: x[n+1] = A[n] * x[n] + B[n] * u[n]
      y[n] = C[n] * x[n]
obsr: x~[n+1] = A[n] * x~[n] + B[n] * u[n] + L[n] * (y[n] - y~[n])
      y~[n] = C[n] * x~[n]

d[k] = x[n] - x^[n]
e[k] = x[n] - x~[n]
u[n] = K[n] * (e[n] - d[n]) + r[n]


//GET    /ob-rest-api/system?name=String
//POST   /ob-rest-api/system
//PUT    /ob-rest-api/system?name=String
//DELETE /ob-rest-api/system?name=String
{ 'name': String,
  'time': [ String, ... ], //reference to Time
  'ctlr': [ String, ... ], //reference to Ctlr
  'obsr': [ String, ... ], //reference to Obsr
  'data': [ String, ... ], //reference to Data
  'fact': [ String, ... ], //reference to Fact
  'plan': [ String, ... ], //reference to Plan
  'rule': [ String, ... ] }//reference to Rule

//GET    /ob-rest-api/<System>/time?name=String&after=Number&before=Number
//POST   /ob-rest-api/<System>/time
//PUT    /ob-rest-api/<System>/time?name=String
//DELETE /ob-rest-api/<System>/time?name=String
{ 'name': String,//unique to System
  'after': Number,
  'before': Number,
  'every': Number }
  
//GET    /ob-rest-api/<System>/ctlr?name=String&time=String
//POST   /ob-rest-api/<System>/ctlr
//PUT    /ob-rest-api/<System>/ctlr?name=String
//DELETE /ob-rest-api/<System>/ctlr?name=String
{ 'name': String,//unique to System
  'proc': String,
  'time': String,          //reference to Time
  'data': [ String, ... ] }//reference to Data
  
//GET    /ob-rest-api/<System>/obsr?name=String&time=String
//POST   /ob-rest-api/<System>/obsr
//PUT    /ob-rest-api/<System>/obsr?name=String
//DELETE /ob-rest-api/<System>/obsr?name=String
{ 'name': String,//unique to System
  'proc': String,
  'time': String,          //reference to Time
  'data': [ String, ... ] }//reference to Data
  
//GET    /ob-rest-api/<System>/data?name=String
//POST   /ob-rest-api/<System>/data
//PUT    /ob-rest-api/<System>/data?name=String
//DELETE /ob-rest-api/<System>/data?name=String
{ 'name': String,//unique to System
  'data': [ { 'name': String,
              'type': String,
              'value': Object }, ... ] }
            
//GET    /ob-rest-api/<System>/fact?name=String
//POST   /ob-rest-api/<System>/fact
//PUT    /ob-rest-api/<System>/fact?name=String
//DELETE /ob-rest-api/<System>/fact?name=String
{ 'name': String,//unique to System
  'proc': String,
  'data': [ String, ... ], //reference to Data
  'rule': [ String, ... ] }//reference to Rule
            
//GET    /ob-rest-api/<System>/plan?name=String
//POST   /ob-rest-api/<System>/plan
//PUT    /ob-rest-api/<System>/plan?name=String
//DELETE /ob-rest-api/<System>/plan?name=String
{ 'name': String,//unique to System
  'proc': String,
  'data': [ String, ... ], //reference to Data
  'rule': [ String, ... ] }//reference to Rule
  
//GET    /ob-rest-api/<System>/rule?name=String
//POST   /ob-rest-api/<System>/rule
//PUT    /ob-rest-api/<System>/rule?name=String
//DELETE /ob-rest-api/<System>/rule?name=String
{ 'name': String,//unique to System
  'fact': [ String, ... ], //reference to Fact
  'plan': [ String, ... ] }//reference to Plan
  
  
data>ctlr>true
true>obsr>data
data>fact>flag
flag>rule>flag
flag>plan>data

ctrl>???>data
data>???>ctrl

{Object: Object, ...} <-> { $dict: [ { key: Object, value: Object }, ... ] }
(Object, ...) <-> { $tuple: [ Object, ... ] }

{ name: Object,
  mem: { (None, Object):  {...},
         (True, Object):  {...},
         (False, Object):  {...},
         (String, Object):  { data: { Object: Object,
                                      ... },
                              ctrl: [ Object, ... ] },
         ... },
  exe: [ { tag: String,
           key: { Object: [ (Object, Object), 
                            ... ], 
                  ... },
           map: { Object: { data: { Object: Object, 
                                    ... },
                            ctrl: { Object: Object, 
                                    ... } },
                  ... } },
         ... ] }
         
//POST   /ob-rest-api/play
//POST   /ob-rest-api/stop
//POST   /ob-rest-api/pause
//POST   /ob-rest-api/resume
//GET    /ob-rest-api/info
{ e: Number,
  q: Number,
  z: Number,
  f: Boolean }

//WS     /ob-io-stream/
[ { name: String,
    items: [ { tag: String,
               data: [ { key: String,
                         value: Object }, ... ],
               ctrl: [ { key: String,
                         value: Boolean }, ... ] }, ... ] }, ... ]

//GET    /ob-rest-api/data/<name:String>/<tag:String>
//PUT    /ob-rest-api/data/<name:String>/<tag:String>
{ name: String,
  tag: String,
  data: [ { key: String,
            value: Object }, ... ] }
            
//POST   /ob-rest-api/ctrl/<name:String>/<tag:String>
{ name: String,
  tag: String,
  ctrl: [ { key: String,
            value: Boolean }, ... ] }



         
time queue for each clock
queue items are a time and an event
must be in __init__ or __main__
all time queues may be scaled
at runtime, next event in wall time is used
coroutines send back times instead of true/false for events
pushed into queue (with event) in __init__
all clocks are update every time step
times are stored in memory
use tornado.gen.sleep
            
(src, trg, rel)
((item,), (item, item, item), (item, item, item))
(((ins, pros),),
 ((ins, pros),
  (ins, pros),
  (ins, pros)),
 ((ins, pros),
  (ins, pros),
  (ins, pros)))
((((_bar, _t_bar), (rec,)),),
 (((_bar, _t_bar), (rec,)),
  ((_bar, _t_bar), (rec,)),
  ((_bar, _t_bar), (rec,))),]
 (((_bar, _t_bar), (rec,)),
  ((_bar, _t_bar), (rec,)),
  ((_bar, _t_bar), (rec,))))

[
  {
    name: String,
    time: [ { name: String,
              args: [ { key: String,
                        every: Number,
                        after: Number,
                        before: Number },
                      ...] },
            ... ],
    data: [ { name: String,
              args: [ { key: String,
                        value: Object },
                      ... ] },
            ... ],
    ctrl: [ { name: String,
              args: [ String,
                      ... ] },
            ... ]
  },
  ...
]
